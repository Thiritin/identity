FROM registry.access.redhat.com/ubi9/ubi-minimal:9.6 AS php-base

LABEL maintainer="ThunderAl <community@thunderal.net>" \
      org.opencontainers.image.authors="ThunderAl <community@thunderal.net>" \
      org.opencontainers.image.title="EF Laraavel release environment" \
      org.opencontainers.image.description="Fine tuned for build time and size image for EF identity system with laravel sail support"

WORKDIR /var/www/html

# PHP version to be installed
# See: https://rpms.remirepo.net/wizard/
# WARNING: PHP 8.2 have only security only support until December 2026
ARG PHP_VERSION=8.2

# list of all PHP packages to be installed
ARG PHP_PACKAGES="php-cli composer php-intl php-json php-mbstring php-mysqlnd php-opcache php-pdo php-gd php-redis php-xml php-swoole php-zip php-sodium php-bcmath"

# nodels version to be installed
ARG NODE_VERSION=20

ENV TZ=UTC

#
# Installing system dependencies
#

RUN set -xe; \
    echo "==> Installing basic dependencies"; \
    microdnf install -y --nodocs git wget procps-ng sudo unzip; \
    microdnf reinstall tzdata -y; \
    \
    echo "==> Setting up RPM repositories"; \
    wget -q https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -O epel-release.rpm; \
      rpm -i epel-release.rpm; rm -f epel-release.rpm; \
    wget -q https://rpms.remirepo.net/enterprise/remi-release-9.rpm -O remi-release.rpm; \
      rpm -i remi-release.rpm; rm -f remi-release.rpm; \
    \
    echo "==> Installing c-ares (swoole requirement) from compatible repository"; \
    wget -q "https://mirror.stream.centos.org/9-stream/BaseOS/$(uname -m)/os/Packages/c-ares-1.17.1-4.el9.$(uname -m).rpm" -O c-ares.rpm; \
      rpm -i --nodigest c-ares.rpm; rm -f c-ares.rpm; \
    \
    echo "==> Installing PHP $PHP_VERSION and extensions"; \
    microdnf module enable --nodocs -y php:remi-$PHP_VERSION; \
    microdnf install -y --nodocs $PHP_PACKAGES; \
    setcap "cap_net_bind_service=+ep" "/usr/bin/php"; \
    \
    echo "==> Installing NodeJs"; \
    microdnf module enable --nodocs -y nodejs:$NODE_VERSION; \
    microdnf install -y --nodocs nodejs npm; \
    \
    microdnf clean all;

COPY ./infra/release/image/entrypoint.sh /entrypoint.sh
COPY ./infra/release/image/php.ini /etc/php.d/99_app.ini

#
# Pre-Download composer dependencies (post install scripts will be executed later)
#

COPY ./composer.json ./composer.lock /var/www/html/

RUN --mount=type=cache,target=/root/.composer/cache \
    set -xe; \
    echo "==> Download composer dependencies"; \
    composer install --no-dev --no-interaction --no-scripts;

FROM php-base AS frontend

#
# dependencies as a separated layer
#

COPY ./package.json ./package-lock.json /var/www/html/

RUN --mount=type=cache,target=/root/.npm \
    set -xe; \
    echo "==> Download frontend dependencies"; \
    npm install --no-audit;

#
# build frontend assets
#

COPY . /var/www/html/
COPY ./resources /var/www/html/resources

RUN --mount=type=cache,target=/root/.npm \
    set -xe; \
    echo "==> Building frontend assets"; \
    npm run build;

FROM php-base AS release

COPY . /var/www/html/

RUN --mount=type=cache,target=/root/.composer/cache \
    set -xe; \
    echo "==> Finalise and install dependencies"; \
    composer install --no-dev --no-interaction --optimize-autoloader; \
    echo "==> Building common caches"; \
    php artisan event:cache; \
    php artisan route:cache; \
    php artisan view:cache;

COPY --from=frontend /var/www/html/public /var/www/html/public

ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
