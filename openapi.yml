openapi: 3.0.0
servers:
  - description: Production
    url: 'https://identity.eurofurence.org/api/v1'
  - description: Local
    url: 'https://identity.eurofurence.localhost/api/v1'
info:
  version: 1.0.0
  title: Eurofurence Identity
  contact:
    email: me@thiritin.com
    name: Thiritin
  license:
    name: Licensed under MIT
    url: 'https://github.com/Thiritin/identity/blob/main/LICENSE'
  termsOfService: 'https://help.eurofurence.org/legal/terms'
  description: |-
    This is the official API Documentation for the Eurofurence Identity service. This can be used to query or automated different things within the Identity service.

    To request a new oauth2 client contact [Thiritin](https://t.me/thiritin) via telegram.
  x-logo:
    url: 'https://raw.githubusercontent.com/Thiritin/identity/main/resources/assets/ef.svg'
    backgroundColor: '#004e4c'
    altText: Eurofurence e.V. Logo
tags:
  - name: Open ID Connect
    description: Endpoints related to OpenID Connect
  - name: Groups
    description: Endpoints related the Group resource
  - name: Group Memberships
security:
  - OpenID:
      - openid
      - offline
      - offline_access
      - profile
      - email
      - groups
      - groups.read
      - groups.write
      - groups.delete
  - AccessToken:
      - read
      - write
      - groups.read
      - groups.write
      - groups.delete
paths:
  /userinfo:
    get:
      summary: Gets userinfo for the user
      description: This is an example operation to show how security is applied to the call.
      security:
        - OpenID:
            - openid
            - profile
            - email
            - groups
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userinfo'
          description: OK
      tags:
        - Open ID Connect
      operationId: getUserinfo
  /groups:
    get:
      summary: Get all groups
      security:
        - OpenID:
            - groups.read
        - AccessToken:
            - groups.read
      description: This call returns a paginated result of all groups.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Used for pagination.
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Group'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://identity.eurofurence.org/api/v1/groups?page=1'
                      last:
                        type: string
                        nullable: true
                        example: 'https://identity.eurofurence.org/api/v1/groups?page=5'
                      prev:
                        type: string
                        nullable: true
                        example: null
                      next:
                        type: string
                        nullable: true
                        example: 'https://identity.eurofurence.org/api/v1/groups?page=2'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      path:
                        type: integer
                        example: 5
                      to:
                        type: integer
                        example: 25
          description: OK
      tags:
        - Groups
      operationId: getGroups
    post:
      operationId: createGroup
      summary: Create a new group
      security:
        - OpenID:
            - groups.create
        - AccessToken:
            - groups.create
      description: This call returns a paginated result of all groups.
      requestBody:
        description: Create a new group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Group'
          description: OK
      tags:
        - Groups
  '/groups/{group}':
    get:
      summary: Get single group
      security:
        - OpenID:
            - groups.read
        - AccessToken:
            - groups.read
      description: This call returns a paginated result of all groups.
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
          example: 8513K1FW0H4W2SJG
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Group'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Not Found!
          description: Not Found
      tags:
        - Groups
      operationId: getGroup
    put:
      summary: Update single group
      security:
        - OpenID:
            - groups.update
        - AccessToken:
            - groups.update
      description: This call updates a single group.
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
          example: 8513K1FW0H4W2SJG
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Group'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Not Found!
          description: Not Found
      tags:
        - Groups
      operationId: putGroup
    patch:
      summary: Update single group
      security:
        - OpenID:
            - groups.update
        - AccessToken:
            - groups.update
      description: This call updates a single group.
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Group'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Not Found!
          description: Not Found
      tags:
        - Groups
      operationId: patchGroup
    delete:
      summary: Deletes a group
      description: Delete a group with the given identifier
      security:
        - OpenID:
            - groups.delete
        - AccessToken:
            - groups.delete
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
          example: 8513K1FW0H4W2SJG
      responses:
        '204':
          description: No Content
          content:
            text/html:
              example: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Not Found!
          description: Not Found
      tags:
        - Groups
      operationId: deleteGroup
  '/groups/{group}/members':
    get:
      summary: Shows user memberships of group
      description: Show members of the groups, please keep in mind that unless filtered banned and invited membes will be also shown.
      security:
        - OpenID:
            - groups.update
        - AccessToken:
            - groups.update
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
          example: 8513K1FW0H4W2SJG
        - in: query
          name: 'filter[level]'
          schema:
            type: string
          examples:
            invited:
              value: invited
              description: Shows any member that is invited to a group but has not accepted the invitation.
            banned:
              value: banned
              description: Shows any member that is banned from a group.
            member:
              value: member
              description: Shows any member that has the member level.
            moderator:
              value: moderator
              description: Shows any member that has the moderator level.
            admin:
              value: admin
              description: Shows any member that has the admin level.
            owner:
              value: owner
              description: Shows any member that has the owner level.
            only_members:
              value: 'member,moderator,admin,owner'
              description: 'Shows only members that are either a member, moderator admin or owner.'
          description: Filter results by user level
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/GroupMembership'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://identity.eurofurence.org/api/v1/groups/Y6K08PEKXG9Q7ZWJ/members?page=1'
                      last:
                        type: string
                        nullable: true
                        example: 'https://identity.eurofurence.org/api/v1/groups/Y6K08PEKXG9Q7ZWJ/members?page=10'
                      prev:
                        type: string
                        nullable: true
                        example: null
                      next:
                        type: string
                        nullable: true
                        example: 'https://identity.eurofurence.org/api/v1/groups/Y6K08PEKXG9Q7ZWJ/members?page=2'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      path:
                        type: integer
                        example: 5
                      to:
                        type: integer
                        example: 100
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Not Found!
          description: Not Found
      tags:
        - Group Memberships
      operationId: getGroupMembers
    post:
      summary: Add a new user to a group
      description: Add a new user to the group, use status "invited" to send an invitation to the user.
      security:
        - OpenID:
            - groups.update
        - AccessToken:
            - groups.update
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
          example: 8513K1FW0H4W2SJG
      requestBody:
        description: Add a user to a group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembershipForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupMembershipForm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembership'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Not Found!
          description: Not Found
      tags:
        - Group Memberships
      operationId: createGroupMember
  '/groups/{group}/members/{user}':
    delete:
      summary: Removes user membership from group
      description: Remove a user account from the group
      security:
        - OpenID:
            - groups.delete
        - AccessToken:
            - groups.delete
      parameters:
        - in: path
          name: group
          schema:
            type: string
          description: Group Identifier
          required: true
        - in: path
          name: user
          schema:
            type: string
          description: User's UUID
          required: true
          example: 1VJEQAYWW54TZ5VD
      responses:
        '204':
          description: No Content
          content:
            text/html:
              example: ''
      tags:
        - Group Memberships
      operationId: deleteGroupMember
components:
  schemas:
    Userinfo:
      type: object
      properties:
        sub:
          readOnly: true
          type: string
          description: Uuid of the user
        name:
          readOnly: true
          type: string
          description: Choosen username by the user
        email:
          readOnly: true
          type: string
          description: Primary email of the user
        email_verified:
          readOnly: true
          type: boolean
          description: 'Boolean value, true if email is verified. false if email is not verified.'
        avatar:
          readOnly: true
          type: string
          description: Returns full url of users avatar.
        groups:
          type: array
          uniqueItems: true
          readOnly: true
          items:
            type: string
    GroupMembership:
      type: object
      properties:
        group_id:
          readOnly: true
          type: string
          description: The group id
        user_id:
          type: string
          description: The user id
        level:
          type: string
          enum:
            - invited
            - banned
            - member
            - moderator
            - admin
            - owner
    GroupMembershipForm:
      type: object
      properties:
        email:
          type: string
          example: thiritin@eurofurence.org
        level:
          type: string
          enum:
            - invited
            - banned
            - member
            - moderator
            - admin
            - owner
          default: invited
          description: 'Please note, adding someone with level "invited" will send an invitation email to the user.'
      required:
        - email
        - level
    Group:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: The groups uuid
          example: Y6K08PEKXG9Q7ZWJ
        type:
          default: none
          enum:
            - none
            - department
        name:
          type: string
          example: Attendees 2021
        description:
          type: string
          example: <b>Thanks for Attending Eurofurence 2021</b>
        logo:
          type: string
          description: URL to the groups logo
          example: 'http://identity.eurofurence.org/storage/avatars/mqKYRqC8aEXifh1muaTJgzIysGRykr-metaMTIucG5n-.png'
        slug:
          type: string
          readOnly: true
          description: 'Unique identifier for the group, but not immuteable.'
          example: attendees-2021
        translations:
          type: object
          readOnly: true
          properties:
            name:
              type: object
              nullable: true
              properties:
                en:
                  type: string
                  example: Attendees 2021
                de:
                  type: string
                  example: Teilnehmer 2021
            description:
              type: object
              nullable: true
              properties:
                en:
                  type: string
                  example: <b>Thanks for Attending Eurofurence 2021</b>
                de:
                  type: string
                  example: <b>Vielen Dank für die teilnahme Eurofurence 2021</b>
        created_at:
          type: string
          example: '2022-12-10T20:41:34.000000Z'
        updated_at:
          type: string
          example: '2022-12-10T20:41:34.000000Z'
    Error:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    OpenID:
      type: openIdConnect
      openIdConnectUrl: 'https://identity.eurofurence.org/.well-known/openid-configuration'
      description: OpenID Connect
    AccessToken:
      type: http
      scheme: bearer
